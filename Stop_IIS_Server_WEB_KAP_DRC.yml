---
- name: Stop IIS KAP Site secara Otomatis
  hosts: windows_servers  # Sesuaikan dengan group inventory Ansible
  gather_facts: no
  collections:
    - ansible.windows

  tasks:
    # Task 1: Stop Site "KAP2022" di IIS
    - name: Stop IIS Site KAP2022
      win_powershell:
        script: |
          Import-Module WebAdministration
          Stop-WebSite -Name "KAP2022"
      register: stop_site
      ignore_errors: yes

    # Task 2: Verifikasi status Site
    - name: Get Status Site KAP2022
      win_powershell:
        script: |
          Import-Module WebAdministration
          Get-WebSite -Name "KAP2022" | Select-Object Name, State
      register: site_status

    # Task 3: Tampilkan hasil
    - name: Debug Hasil
      debug:
        msg: |
          ✅ Site KAP2022 berhasil di-stop.
          Status terkini: {{ site_status.stdout_lines }}
      when: stop_site.rc == 0

---
- name: Check Database Mirroring Sync Status
  hosts: windows_servers  # Sesuaikan dengan group inventory
  gather_facts: no
  collections:
    - ansible.windows

  tasks:
    # Task 1: Check Status Mirroring Database CNKAP
    - name: Get Mirroring Status
      win_powershell:
        script: |
          Import-Module SqlServer
          $query = @"
          SELECT 
            DB_NAME(database_id) AS DatabaseName,
            mirroring_state_desc AS MirrorState,
            mirroring_role_desc AS Role
          FROM sys.database_mirroring
          WHERE DB_NAME(database_id) = 'CNKAP'
          "@
          Invoke-Sqlcmd -Query $query -ServerInstance "{{ sql_server_instance }}"  # Ganti dengan IP/hostname SQL Server
      register: mirroring_status
      ignore_errors: yes

    # Task 2: Validasi Status Sync
    - name: Validate Sync Status
      debug:
        msg: |
          {% if mirroring_status.stdout_lines | length > 0 %}
            ✅ Database CNKAP Status:
              - Role: {{ mirroring_status.stdout_lines[0].Role }}
              - Mirror State: {{ mirroring_status.stdout_lines[0].MirrorState }}
            {% if mirroring_status.stdout_lines[0].MirrorState == 'SYNCHRONIZED' and mirroring_status.stdout_lines[0].Role == 'PRINCIPAL' %}
              ➡️ Status valid: Database utama (Principal) dan tersinkronisasi.
            {% else %}
              ❌ Error: Database tidak sinkron atau bukan Principal!
            {% endif %}
          {% else %}
            ❌ Database CNKAP tidak ditemukan atau mirroring tidak aktif.
          {% endif %}


---
- name: Verify Database Mirroring Sync Status (Principal & Mirror)
  hosts: windows_servers
  gather_facts: no
  collections:
    - ansible.windows

  vars:
    # Sesuaikan dengan environment Anda
    principal_server: "IDCBRKAPSDBS002"  # Server active (Principal)
    mirror_server: "IDCBPKAPSDBS002"     # Server in-active (Mirror)
    db_name: "CNKAP"

  tasks:
    # Task 1: Check Status di Principal Server (Active)
    - name: Check Principal Server Status
      win_powershell:
        script: |
          Import-Module SqlServer
          $query = @"
          SELECT 
            DB_NAME(database_id) AS DatabaseName,
            mirroring_state_desc AS MirrorState,
            mirroring_role_desc AS Role
          FROM sys.database_mirroring
          WHERE DB_NAME(database_id) = '{{ db_name }}'
          "@
          Invoke-Sqlcmd -Query $query -ServerInstance "{{ principal_server }}"
      register: principal_status
      ignore_errors: yes
      delegate_to: "{{ principal_server }}"  # Pastikan Ansible bisa akses server ini

    # Task 2: Check Status di Mirror Server (In-Active)
    - name: Check Mirror Server Status
      win_powershell:
        script: |
          Import-Module SqlServer
          $query = @"
          SELECT 
            DB_NAME(database_id) AS DatabaseName,
            mirroring_state_desc AS MirrorState,
            mirroring_role_desc AS Role
          FROM sys.database_mirroring
          WHERE DB_NAME(database_id) = '{{ db_name }}'
          "@
          Invoke-Sqlcmd -Query $query -ServerInstance "{{ mirror_server }}"
      register: mirror_status
      ignore_errors: yes
      delegate_to: "{{ mirror_server }}"  # Pastikan Ansible bisa akses server ini

    # Task 3: Validasi Hasil
    - name: Validate Mirroring Status
      debug:
        msg: |
          {% if principal_status.stdout_lines | length > 0 and mirror_status.stdout_lines | length > 0 %}
            ✅ **Principal Server ({{ principal_server }})**:
              - Role: {{ principal_status.stdout_lines[0].Role }}
              - Mirror State: {{ principal_status.stdout_lines[0].MirrorState }}
            ✅ **Mirror Server ({{ mirror_server }})**:
              - Role: {{ mirror_status.stdout_lines[0].Role }}
              - Mirror State: {{ mirror_status.stdout_lines[0].MirrorState }}
            {% if principal_status.stdout_lines[0].MirrorState == 'SYNCHRONIZED' and 
                  mirror_status.stdout_lines[0].MirrorState == 'SYNCHRONIZED' and
                  principal_status.stdout_lines[0].Role == 'PRINCIPAL' and
                  mirror_status.stdout_lines[0].Role == 'MIRROR' %}
              ➡️ **STATUS VALID**: Database tersinkronisasi sempurna!
            {% else %}
              ❌ **ERROR**: Status tidak valid! Periksa:
                - Principal harus 'PRINCIPAL' + 'SYNCHRONIZED'
                - Mirror harus 'MIRROR' + 'SYNCHRONIZED'/'RESTORING'
            {% endif %}
          {% else %}
            ❌ Database tidak ditemukan atau mirroring tidak aktif!
          {% endif %}


---
- name: Execute Database Mirroring Switchover and Stop SQL Agent
  hosts: windows_servers
  gather_facts: no
  collections:
    - ansible.windows

  vars:
    active_server: "IDCBRKAPSDBS002"  # Server active (Principal)
    inactive_server: "IDCBPKAPSDBS002" # Server in-active (Mirror)
    db_name: "CNKAP"
    sql_agent_service: "SQLSERVERAGENT"  # Nama service SQL Server Agent

  tasks:
    # =============================================
    # 1. SWITCH MIRRORING (Failover)
    # =============================================
    - name: Initiate Database Failover (Switchover)
      win_powershell:
        script: |
          Import-Module SqlServer
          Invoke-Sqlcmd -Query "ALTER DATABASE [{{ db_name }}] SET PARTNER FAILOVER" -ServerInstance "{{ active_server }}"
      register: failover_result
      ignore_errors: yes
      delegate_to: "{{ active_server }}"

    - name: Verify Failover Status
      debug:
        msg: |
          {% if failover_result.rc == 0 %}
            ✅ SUCCESS: Database {{ db_name }} failover executed on {{ active_server }}
          {% else %}
            ❌ ERROR: Failover failed! Details: {{ failover_result.stderr }}
          {% endif %}

    # =============================================
    # 2. RECOVER DATABASE ON INACTIVE SERVER
    # =============================================
    - name: Recover Database on Mirror Server
      win_powershell:
        script: |
          Import-Module SqlServer
          Invoke-Sqlcmd -Query "RESTORE DATABASE [{{ db_name }}] WITH RECOVERY" -ServerInstance "{{ inactive_server }}"
      register: recover_result
      ignore_errors: yes
      delegate_to: "{{ inactive_server }}"

    - name: Verify Recovery Status
      debug:
        msg: |
          {% if recover_result.rc == 0 %}
            ✅ SUCCESS: Database {{ db_name }} recovered on {{ inactive_server }}
          {% else %}
            ❌ ERROR: Recovery failed! Details: {{ recover_result.stderr }}
          {% endif %}

    # =============================================
    # 3. STOP SQL SERVER AGENT
    # =============================================
    - name: Stop SQL Server Agent Service
      win_service:
        name: "{{ sql_agent_service }}"
        state: stopped
      register: stop_agent
      ignore_errors: yes
      delegate_to: "{{ active_server }}"

    - name: Verify SQL Agent Status
      win_powershell:
        script: |
          Get-Service -Name "{{ sql_agent_service }}" | Select-Object Name, Status
      register: agent_status
      delegate_to: "{{ active_server }}"

    - name: Display Final Status
      debug:
        msg: |
          FINAL STATUS:
          - Database Failover: {{ "SUCCESS" if failover_result.rc == 0 else "FAILED" }}
          - Database Recovery: {{ "SUCCESS" if recover_result.rc == 0 else "FAILED" }}
          - SQL Agent Status: {{ agent_status.stdout_lines[0].Status }}


---
- name: Manage KAP Services and IIS
  hosts: windows_servers
  gather_facts: no
  collections:
    - ansible.windows

  vars:
    web_services:
      - "KAP Service – Web Config Editor"
    db_services:
      - "KAP Service Application"
      - "KAP Service - Service Editor"
    iis_service: "W3SVC"

  tasks:
    # =============================================
    # 1. STOP KAP SERVICES (Web & Database)
    # =============================================
    # Stop Web Services di Server Web Active
    - name: Stop Web KAP Services
      win_service:
        name: "{{ item }}"
        state: stopped
      loop: "{{ web_services }}"
      register: stop_web_services
      ignore_errors: yes
      delegate_to: "{{ active_web_server }}"  # Ganti dengan hostname server web active

    # Stop Database Services di Server DB Active
    - name: Stop Database KAP Services
      win_service:
        name: "{{ item }}"
        state: stopped
      loop: "{{ db_services }}"
      register: stop_db_services
      ignore_errors: yes
      delegate_to: "{{ active_db_server }}"  # Ganti dengan hostname server DB active

    # =============================================
    # 2. START IIS DI SERVER IN-ACTIVE
    # =============================================
    - name: Start IIS Service di Server In-Active
      win_service:
        name: "{{ iis_service }}"
        state: started
      register: start_iis
      ignore_errors: yes
      delegate_to: "{{ inactive_web_server }}"  # Ganti dengan hostname server web in-active

    # =============================================
    # 3. VERIFIKASI STATUS
    # =============================================
    - name: Verify Service Status
      block:
        - name: Check Stopped Web Services
          win_powershell:
            script: Get-Service -Name "{{ web_services | join('","') }}"
          register: web_status
          delegate_to: "{{ active_web_server }}"

        - name: Check Stopped DB Services
          win_powershell:
            script: Get-Service -Name "{{ db_services | join('","') }}"
          register: db_status
          delegate_to: "{{ active_db_server }}"

        - name: Check Started IIS
          win_powershell:
            script: Get-Service -Name "{{ iis_service }}"
          register: iis_status
          delegate_to: "{{ inactive_web_server }}"

      always:
        - name: Display Results
          debug:
            msg: |
              FINAL STATUS:
              WEB SERVICES ({{ active_web_server }}):
              {% for service in web_status.stdout_lines %}
                - {{ service.Name }}: {{ service.Status }}
              {% endfor %}

              DB SERVICES ({{ active_db_server }}):
              {% for service in db_status.stdout_lines %}
                - {{ service.Name }}: {{ service.Status }}
              {% endfor %}

              IIS STATUS ({{ inactive_web_server }}):
                - {{ iis_status.stdout_lines[0].Name }}: {{ iis_status.stdout_lines[0].Status }}


---
- name: Start SQL Server Agent on New Active Server using Shell
  hosts: windows_servers
  gather_facts: no
  collections:
    - ansible.windows

  vars:
    new_active_server: "IDCBPKAPSDBS002"  # Server in-active yang akan menjadi active
    sql_agent_service: "SQLSERVERAGENT"   # Nama service SQL Server Agent
    sql_instance_name: "IDKAPSP1"         # Nama instance SQL Server

  tasks:
    # =============================================
    # 1. START SQL SERVER AGENT SERVICE (Menggunakan win_shell)
    # =============================================
    - name: Start and Configure SQL Agent Service
      win_shell: |
        # Start service
        Start-Service -Name "{{ sql_agent_service }}" -ErrorAction Stop
        
        # Set startup type to Automatic
        Set-Service -Name "{{ sql_agent_service }}" -StartupType Automatic
        
        # Verify service state
        $service = Get-Service -Name "{{ sql_agent_service }}"
        [PSCustomObject]@{
          Name      = $service.Name
          Status    = $service.Status
          StartType = $service.StartType
        } | ConvertTo-Json
      register: service_result
      ignore_errors: yes
      delegate_to: "{{ new_active_server }}"
      args:
        executable: powershell

    # =============================================
    # 2. TAMPILKAN HASIL
    # =============================================
    - name: Display Final Results
      debug:
        msg: |
          SQL SERVER AGENT STATUS:
          - Server: {{ new_active_server }}
          - Service Name: {{ (service_result.stdout | from_json).Name }}
          - Current Status: {{ (service_result.stdout | from_json).Status }}
          - Start Mode: {{ (service_result.stdout | from_json).StartType }}
          {% if (service_result.stdout | from_json).Status -eq 'Running' %}
          ✅ SUCCESS: SQL Server Agent is now ACTIVE
          {% else %}
          ❌ ERROR: Failed to start SQL Server Agent!
          Details: {{ service_result.stderr }}
          {% endif %}


###############################################################
---
- name: Automation KAP Services Management for Windows
  hosts: all
  gather_facts: no
  collections:
    - ansible.windows

  tasks:
    - name: Stop IIS Server
      win_powershell:
        script: Stop-Service -Name W3SVC -Force
      register: stop_iis
      ignore_errors: yes

    - name: Hasil Stop IIS Server
      debug:
        msg: "✅ IIS Server WEB KAP DRC berhasil di-stop"

    - name: Stop Service Server Web KAP DRC
      win_powershell:
        script: Stop-Service -Name "KAP Service – Web Config Editor" -Force
      register: stop_kap_service
      ignore_errors: yes

    - name: Hasil Stop IIS Server
      debug:
        msg: "✅ Service Server Web KAP DRC berhasil di-stop"

    # Task 2: Stop KAP Web Config Editor Service
    - name: Stop KAP Web Config Editor Service
      win_powershell:
        script: Stop-Service -Name "KAP Service – Web Config Editor" -Force
      register: stop_web_config
      ignore_errors: yes

    - name: Hasil Stop Web Config Editor
      debug:
        msg: "✅ KAP Web Config Editor berhasil di-stop"

    # Task 3: Stop Aplikasi Services
    - name: Stop KAP Application Services
      win_powershell:
        script: |
          Stop-Service -Name "KAP Service Application" -Force
          Stop-Service -Name "KAP Service - Service Editor" -Force
      register: stop_app_services
      ignore_errors: yes

    - name: Hasil Stop Aplikasi Services
      debug:
        msg: "✅ KAP Application Services berhasil di-stop"

    # Task 4: Stop SQL Server Agent
    - name: Stop SQL Server Agent
      win_powershell:
        script: Stop-Service -Name "SQLSERVERAGENT" -Force
      register: stop_sql_agent
      ignore_errors: yes

    - name: Hasil Stop SQL Server Agent
      debug:
        msg: "✅ SQL Server Agent berhasil di-stop"

    # Task 5: Check Sync Database (Mirroring)
    - name: Check Database Mirroring Status
      win_powershell:
        script: |
          Import-Module SqlServer
          Invoke-Sqlcmd -Query "SELECT mirroring_state_desc FROM sys.database_mirroring WHERE database_id = DB_ID('CNKAP')" -ServerInstance "."
      register: db_mirroring_status

    - name: Hasil Check Mirroring
      debug:
        var: db_mirroring_status.stdout_lines

    # Task 6: Switch Database (Failover)
    - name: Execute Database Failover
      win_powershell:
        script: |
          Invoke-Sqlcmd -Query "ALTER DATABASE [CN_KAP] SET PARTNER FAILOVER" -ServerInstance "."
      register: db_failover
      ignore_errors: yes

    - name: Hasil Database Failover
      debug:
        msg: "✅ Database failover berhasil dijalankan"

    # Task 7: Start IIS Server
    - name: Start IIS Server
      win_powershell:
        script: Start-Service -Name W3SVC
      register: start_iis

    - name: Hasil Start IIS Server
      debug:
        msg: "✅ IIS Server berhasil di-start"

    # Task 8: Start KAP Web Config Editor
    - name: Start KAP Web Config Editor
      win_powershell:
        script: Start-Service -Name "KAP Service – Web Config Editor"
      register: start_web_config

    - name: Hasil Start Web Config Editor
      debug:
        msg: "✅ KAP Web Config Editor berhasil di-start"

    # Task 9: Start KAP Application Services
    - name: Start KAP Application Services
      win_powershell:
        script: |
          Start-Service -Name "KAP Service Application"
          Start-Service -Name "KAP Service - Service Editor"
      register: start_app_services

    - name: Hasil Start Aplikasi Services
      debug:
        msg: "✅ KAP Application Services berhasil di-start"
